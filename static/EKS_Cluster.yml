AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  VpcCidr:
    Type: String
    Description: "The CIDR block for the VPC"
    Default: "10.0"

Resources:
#VPC#
  EKSVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Join
        - ''
        - - !Ref VpcCidr
          - .0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Name
          Value: Workshop-EKS-VPC

# Private Subnets #
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Join
        - ''
        - - !Ref 'VpcCidr'
          - .11.0/24
      MapPublicIpOnLaunch: 'false'
      VpcId: !Ref 'EKSVpc'
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - private-1
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Join
        - ''
        - - !Ref 'VpcCidr'
          - .12.0/24
      MapPublicIpOnLaunch: 'false'
      VpcId: !Ref 'EKSVpc'
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - private-2
  PrivateSubnet3:
    Type: AWS::EC2::Subnet  
    Properties:
      CidrBlock: !Join
        - ''
        - - !Ref 'VpcCidr'
          - .13.0/24
      MapPublicIpOnLaunch: 'false'
      VpcId: !Ref 'EKSVpc'
      AvailabilityZone: !Select
        - 2
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - private-3

#Public SUBNETS#
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Join
        - ''
        - - !Ref 'VpcCidr'
          - .4.0/24
      MapPublicIpOnLaunch: 'true'
      VpcId: !Ref 'EKSVpc'
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - public-1
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Join
        - ''
        - - !Ref 'VpcCidr'
          - .5.0/24
      MapPublicIpOnLaunch: 'true'
      VpcId: !Ref 'EKSVpc'
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - public-2
  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Join
        - ''
        - - !Ref 'VpcCidr'
          - .6.0/24
      MapPublicIpOnLaunch: 'true'
      VpcId: !Ref 'EKSVpc'
      AvailabilityZone: !Select
        - 2
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - public-3

  # NAT Gateway (Private) #
  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'NATGatewayEIP.AllocationId'
      SubnetId: !Ref 'PublicSubnet1'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - nat-gateway
  NATGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  PrivateRouteTable:
    Properties:
      VpcId: !Ref 'EKSVpc'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - private-rt-table
    Type: AWS::EC2::RouteTable
  RouteNATGateway:
    DependsOn:
      - NATGateway
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'PrivateRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref 'NATGateway'
  PrivateRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref 'PrivateRouteTable'
      SubnetId: !Ref 'PrivateSubnet1'
  PrivateRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref 'PrivateRouteTable'
      SubnetId: !Ref 'PrivateSubnet2'
  PrivateRouteTableAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref 'PrivateRouteTable'
      SubnetId: !Ref 'PrivateSubnet3'

  # Internet Gateway (Public) #
  PublicInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - igw
  PublicGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'EKSVpc'
      InternetGatewayId: !Ref 'PublicInternetGateway'
  PublicRouteTable:
    Properties:
      VpcId: !Ref 'EKSVpc'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - public-rt-table
    Type: AWS::EC2::RouteTable
  PublicRouteToGateway:
    Type: AWS::EC2::Route
    DependsOn: PublicGatewayAttachment
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      RouteTableId: !Ref 'PublicRouteTable'
      GatewayId: !Ref 'PublicInternetGateway'
  PublicRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      SubnetId: !Ref 'PublicSubnet1'
  PublicRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      SubnetId: !Ref 'PublicSubnet2'
  PublicRouteTableAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      SubnetId: !Ref 'PublicSubnet3'

  CPSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EKS Control Plane Security Group
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId: !Ref 'EKSVpc'

  # IAM Roles #
  WorkshopAwsCPRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: Workshop-ControlPlane-instance-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - autoscaling:DescribeAutoScalingGroups
                  - autoscaling:DescribeLaunchConfigurations
                  - autoscaling:DescribeTags
                  - ec2:DescribeInstances
                  - ec2:DescribeRegions
                  - ec2:DescribeRouteTables
                  - ec2:DescribeSecurityGroups
                  - ec2:DescribeSubnets
                  - ec2:DescribeVolumes
                  - ec2:DescribeAvailabilityZones
                  - ec2:CreateSecurityGroup
                  - ec2:CreateTags
                  - ec2:CreateVolume
                  - ec2:ModifyInstanceAttribute
                  - ec2:ModifyVolume
                  - ec2:AttachVolume
                  - ec2:AuthorizeSecurityGroupIngress
                  - ec2:CreateRoute
                  - ec2:DeleteRoute
                  - ec2:DeleteSecurityGroup
                  - ec2:DeleteVolume
                  - ec2:DetachVolume
                  - ec2:RevokeSecurityGroupIngress
                  - ec2:DescribeVpcs
                  - elasticloadbalancing:AddTags
                  - elasticloadbalancing:AttachLoadBalancerToSubnets
                  - elasticloadbalancing:ApplySecurityGroupsToLoadBalancer
                  - elasticloadbalancing:CreateLoadBalancer
                  - elasticloadbalancing:CreateLoadBalancerPolicy
                  - elasticloadbalancing:CreateLoadBalancerListeners
                  - elasticloadbalancing:ConfigureHealthCheck
                  - elasticloadbalancing:DeleteLoadBalancer
                  - elasticloadbalancing:DeleteLoadBalancerListeners
                  - elasticloadbalancing:DescribeLoadBalancers
                  - elasticloadbalancing:DescribeLoadBalancerAttributes
                  - elasticloadbalancing:DetachLoadBalancerFromSubnets
                  - elasticloadbalancing:DeregisterInstancesFromLoadBalancer
                  - elasticloadbalancing:ModifyLoadBalancerAttributes
                  - elasticloadbalancing:RegisterInstancesWithLoadBalancer
                  - elasticloadbalancing:SetLoadBalancerPoliciesForBackendServer
                  - elasticloadbalancing:AddTags
                  - elasticloadbalancing:CreateListener
                  - elasticloadbalancing:CreateTargetGroup
                  - elasticloadbalancing:DeleteListener
                  - elasticloadbalancing:DeleteTargetGroup
                  - elasticloadbalancing:DescribeListeners
                  - elasticloadbalancing:DescribeLoadBalancerPolicies
                  - elasticloadbalancing:DescribeTargetGroups
                  - elasticloadbalancing:DescribeTargetHealth
                  - elasticloadbalancing:ModifyListener
                  - elasticloadbalancing:ModifyTargetGroup
                  - elasticloadbalancing:RegisterTargets
                  - elasticloadbalancing:DeregisterTargets
                  - elasticloadbalancing:SetLoadBalancerPoliciesOfListener
                  - iam:CreateServiceLinkedRole
                  - kms:DescribeKey
                  - kms:ListKeys
                Resource: '*'

  WorkshopAwsCPInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: demo-profile
      Path: /
      Roles:
        - !Ref 'WorkshopAwsCPRole'
  
  WorkshopInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: Workshop-ControlPlane-instance-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - autoscaling:DescribeAutoScalingGroups
                  - autoscaling:DescribeAutoScalingInstances
                Resource: '*'

  WorkshopInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref 'WorkshopInstanceRole'

  WorkshopK8sClusterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - eks.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy

#EKS CLUSTER#
  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: "eks-cluster-for-workshop"
      RoleArn: !GetAtt WorkshopK8sClusterRole.Arn
      Version: "1.24"
      ResourcesVpcConfig:
        SubnetIds:
          - !Ref PublicSubnet1
          - !Ref PublicSubnet2
          - !Ref PublicSubnet3
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
          - !Ref PrivateSubnet3
  VpcCni:
    Type: AWS::EKS::Addon
    Properties:
      AddonName: vpc-cni
      AddonVersion: v1.12.6-eksbuild.1
      ClusterName: !Ref EKSCluster
      ResolveConflicts: OVERWRITE
      Tags:
        - Key: eks_addon
          Value: True

  KubeNodeGroupRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy

  KubeClusterNodegroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref EKSCluster
      NodeRole: !GetAtt KubeNodeGroupRole.Arn
      NodegroupName: "NodeGroup-1"
      AmiType: "AL2_x86_64"
      InstanceTypes:
        - t3.medium
      CapacityType: ON_DEMAND
      DiskSize: 50
      ScalingConfig:
        MinSize: 3
        DesiredSize: 3
        MaxSize: 3
      Subnets:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3

  Cloud9Env:
    Type: AWS::Cloud9::EnvironmentEC2
    Properties:
      AutomaticStopTimeMinutes: 120
      ImageId: 'amazonlinux-2-x86_64'
      InstanceType: 't3.medium'
      Name: 'Workshop-Workspace'


#Outputs:
#  ClusterRoleARN:
#    Description: "Role ARN for the EKS Cluster"
#    Value: !GetAtt WorkshopK8sClusterRole.Arn